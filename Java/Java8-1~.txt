8-1 프로그램 오류
- 컴파일 에러(compile-time error) : 컴파일 할 때 발생하는 에러
- 런타임 에러(runtime error) : 실행 시에 콘솔창에서 발생하는 에러
- 논리적 에러(logical error) : 실행은 되지만, 작성 의도와 다르게 동작

*Java의 런타임 에러
- 에러(error) : 프로그램 코드에 의해서 수습될 수 없는 심각한 오류
- 예외(exception) : 프로그램 코드에 의해서 수습될 수 있는 다소 미약한 오류

*예외처리의 정의와 목적
- 정의 : 프로그램 실행 시 발생할 수 있는 예외의 발생에 대비한 코드를 작성하는 것
- 목적 : 프로그램의 비정상 종료를 막고, 정상적인 실행상태를 유지하는 것

상속계층도
이미지1

Exception과 자손들
이미지2

Exception + 자손클래스들 : 사용자의 실수와 같은 외적인 요인에 의해 발생하는 예외
RuntimeException + 자손클래스들 : 프로그래머의 실수로 발생하는 예외






8-4 예외 처리하기. try-catch문
- 정의 : 프로그램 실행 시 발생할 수 있는 예외의 발생에 대비한 코드를 작성하는 것
- 목적 : 프로그램의 비정상 종료를 막고, 정상적인 실행상태를 유지하는 것

이미지1
괄호{} 생략 불가

8-5 try-catch문에서의 흐름
이미지1

예외에 발생하지않았을 때
이미지2

예외가 발생했을 때
이미지3
try블록 내에서 예외가 발생한 이후 메서드는 실행되지 않고 catch로 넘어감
catch블록이 여러개 있어도 먼저 true값이 나오면 catch블록 하나만 수행 되고 넘어감 






8-7 printStackTrace()와 getMessage
- printStackTrace() : 예외발생 당시의 호출스택(call Stack)에 있었던 메서드의 정보와 예외 메세지를 화면에 출력한다.
- getMessage() : 발생한 예외클래스의 인스턴스에 저장된 메시지를 얻을 수 있다.
이미지1
printStackTrace() 메서드는 스택에 있는 내용을 알려줌
getMessage() 메서드는 String 형태로 메시지를 알려줌








8-8 멀티 catch블럭
- 내용이 같은 catch블럭을 하나로 합친 것(JDK1.7부터)
- 부모 자식 관계의 멀티 catch블럭은 사용 불가
- 멀티 catch블럭의 참조변수는 공통 멤버만 사용 가능
이미지1






8-9 예외 발생시키기
이미지1
이미지2







8-10 checked예외, unchecked예외
- checked예외(Exception + 자손들) : 컴파일러가 예외 처리 여부를 체크(예외 처리 필수)
- unchecked예외(RuntimeException + 자손들) : 컴파일러가 예외 처리 여부를 체크 안함(예외 처리 선택)
예외클래스계층구조 이미지2





8-11 메서드에 예외 선언하기
- 예외를 처리하는 방법 : try-catch문, 예외 선언하기, 빈 catch블럭
1. try-catch문 : 직접처리
2. 예외 선언하기 : 예외 떠넘기기
3. 빈 catch블럭 : 은폐, 덮기, 무시


예외 발생시키기는 throw
예외를 메서드에 선언할 때는 throws
이미지1
이미지2
try-catch문이 없으면 Java Virtual Machine이 처리를 함





8-14 finally블럭
- 예외 발생여부와 관계없이 수행되어야 하는 코드를 넣는다.
이미지1
이미지2







8-15 사용자 정의 예외 만들기
- 우리가 직접 예외 클래스를 정의할 수 있다.
- 조상은 Exception과 RuntimeException중에서 선택
이미지1
1. 조상선택
2. String 매개변수가 있는 생성자 추가 





8-17 예외 되던지기(exception re-throwing)
- 예외를 처리한 후에 다시 예외를 발생시키는 것
- 호출한 메서드와 호출된 메서드 양쪽 모두에서 예외처리하는 것
이미지1






8-18 연결된 예외(chained exception)
- 한 예외가 다른 예외를 발생시킬 수 있다.
- 예외 A가 예외 B를 발생시키면, A는 B의 원인 예외(cause exception)
이미지1

이미지2
1. install() 메서드에서 startInstall에 예외A 발생
2. catch에서 처리를 하는데 새로운 예외B를 생성
3. initCause()로 지정한 예외를 원인 예외로 등록
4. throw.ie; 로 InstallException을 발생시킴


사용하는 이유
[이유1] 여러 예외를 하나로 묶어서 다루기 위해서
이미지3

[이유2] checked예외를 unchecked예외로 변경하려 할 때
이미지4
checked예외인 SpaceException, MemoryException 예외선언

이미지5
기존에 있던 MemoryException을 RuntimeException(원인 예외)으로 변경



