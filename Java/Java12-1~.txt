12-1 지네릭스(Generics)
- 컴파일시 타입을 체크해 주는 기능 (compile-time type check) - JDK1.5이후
- 객체의 타입 안정성을 높이고 형변환의 번거로움을 줄여줌

이미지1
<TV>로 타입을 체크함 
장점
1. 타입 안정성을 제공
2. 코드가 간결해짐

여러 에러 중에서 Exception에 속해 있는 RuntimeException에서 
발생하는 에러 중 ClassCastException을 컴파일 타임의 에러로 바꾸어서 발생하면 수정이 가능하게 하는 것





12-2 타입 변수
- 지네릭 클래스를 작성할 때, Object타입 대신 타입 변수(E)를 선언해서 사용
이미지1





12-3 타입 변수에 대입하기
- 객체를 생성시, 타입 변수(E) 대신 실제 타입(Tv)을 지정(대입)
이미지1

- 타입 변수 대신 실제 타입이 지정되면, 형변환 생략 가능
이미지2




12-4 지네릭스 용어
이미지1


이미지2
중괄호에 지네릭 클래스 선언

이미지3
지네릭 클래스 호출





12-5~6 지네릭 타입과 다형성
- 참조 변수와 생성자의 대입된 타입은 일치해야 한다.
이미지1
* 조상과 자손 관계도 안된다.

- 지네릭 클래스간의 다형성은 성립.(여전히 대입된 타입은 일치)
이미지2

- 매개변수의 다형성도 성립.
이미지3





12-7 Iterator<E>
- 클래스를 작성할 때, Object타입 대신 T와 같은 타입 변수를 사용
이미지1




12-8 HashMap<K,V>
- 여러 개의 타입 변수가 필요한 경우, 콤마(,)를 구분자로 선언
이미지1
-> 이미지2





12-9 제한된 지네릭 클래스
- extends로 대입할 수 있는 타입을 제한
이미지1


- 인터페이스인 경우에도 implements 대신 extends를 사용
이미지2






12-11 지네릭스의 제약
- 타입 변수에 대입은 인스턴스 별로 다르게 가능
이미지1

- static멤버에 타입 변수 사용 불가
이미지2

- 배열 생성할 때 타입 변수 사용불가. 타입 변수로 배열 선언은 가능
이미지3





12-12 와일드 카드<?>
- 하나의 참조 변수로 대입된 타입이 다른 객체를 참조 가능
이미지1


와일드 카드의 종류
이미지2
주로 extends를 많이 사용


- 메서드의 매개변수에 와일드 카드를 사용
이미지3




12-14 지네릭 메서드
- 지네릭 타입이 선언된 메서드(타입 변수는 메서드 내에서만 유효)
이미지1



- 클래스의 타입 매개변수<T>와 메서드의 타입 매개변수 <T>는 별개
이미지2


- 메서드를 호출할 때마다 타입을 대입해야 함(대부분 생략 가능)
이미지3


- 메서드를 호출할 때 타입을 생략하지 않을 때는 클래스 이름 생략 불가
이미지4

와일드 카드와 지네릭 메서드의 다른 점
와일드 카드 : 하나의 참조변수로 서로 다른 타입이 대입된 여러 지네릭 객체를 다루기 위함
지네릭 메서드 : 호출할 때마다 다른 지네릭 타입을 대입할 수 있게 해주기 위함





12-15 지네릭 타입의 형변환
- 지네릭 타입과 원시 타입 간의 형변환은 바람직 하지 않다.(경고 발생)
이미지1

- 와일드 카드가 사용된 지네릭 타입으로는 형변환 가능
이미지2


12-16 지네릭 타입의 제거
- 컴파일러는 지네릭 타입을 제거하고, 필요한 곳에 형변환을 넣는다.
1. 지네릭 타입의 경계(bound)를 제거
이미지1

2. 지네릭 타입 제거 후에 타입이 불일치하면, 형변환을 추가
이미지2
생략되어 있는 Fruit타입 추가

3. 와일드 카드가 포함된 경우, 적절한 타입으로 형변환 추가
이미지3


