14-1 람다식(Lambda Expression)
자바는 원래 oop(객체지향언어)였는데 JDK1.8부터 함수형 언어가 추가됨
- 함수(메서드)를 간단한 식(expression)으로 표현하는 방법
이미지1

- 익명 함수(이름이 없는 함수, anonymous function)
이미지2
반환타입과 이름이 없고 ->를 사용

- 함수와 메서드의 차이
근본적으로 동일. 함수는 일반적 용어, 메서드는 객체지향개념 용어
함수는 클래스 밖에서 사용해서 독립적, 메서드는 클래스 안에서 사용해서 종속적임






14-2 람다식 작성하기
- 함수(메서드)를 간단히 표현하는 법
1. 메서드의 이름과 반환타입을 제거하고 ->를 블록{} 앞에 추가한다.
이미지3

2. 반환값이 있는 경우, 식이나 값만 적고 return문 생략 가능(끝에 ; 안 붙임)
이미지4

3. 매개변수의 타입이 추론 가능하면 생략가능(대부분의 경우 생략가능)
이미지5

*작성 시 주의사항
1. 매개변수가 하나인 경우, 괄호() 생략 가능(타입이 없을 때만)
이미지6

2. 블록 안의 문장이 하나뿐 일 때, 괄호{}생략가능(끝에 ; 안 붙임)
이미지7
단, 하나뿐이 문장이 return문이면 괄호{} 생략 불가





14-4 람다식은 익명 객체이다
- 람다식은 익명 함수가 아니라 익명 개체이다.
이미지8
익명클래스에서 익명객체의 선언과 생성을 동시에 적용

- 람다식(익명 객체)을 다루기 위한 참조변수가 필요. 참조변수의 타입은?
 




14-5 함수형 인터페이스
- 함수형 인터페이스 : 단 하나의 추상 메서드만 선언된 인터페이스


- 함수형 인터페이스 타입의 참조변수로 람다식을 참조할 수 있음.
(단, 함수형 인터페이스의 메서드와 람다식의 매개변수 개수와 반환타입이 일치해야 함.)
이미지2

코드1



14-5 함수형 인터페이스 - example
- 익명 객체를 람다식으로 대체
이미지1






14-6 함수형 인터페이스 타입의 매개변수, 반환타입
- 함수형 인터페이스 타입의 매개변수
이미지1
매개변수로 람다식을 받음

- 함수형 인터페이스 타입의 반환타입
이미지1
메서드의 반환타입으로 함수형 인터페이스를 넣어서 반환할 수 있음





14-7 java.util.function패키지
- 자주 사용되는 다양한 함수형 인터페이스를 제공
이미지1


- 매개변수가 2개인 함수형 인터페이스
이미지2

매개변수가 3개 이상일 때는 만들어서 사용하면 됨.
코드2

- 매개변수의 타입과 반환타입이 일치하는 함수형 인터페이스
이미지3





14-9 Predicate(조건식)의 결합
- and(), or(), negate()로 두 Predicate를 하나로 결합(default메서드)
이미지1

등가비교를 위한 Predicate의 작성에는 isEqual()을 사용(static메서드)
이미지2
boolean result = Predicate.isEqual(str1).test(str2); // 두 문장을 한 문장으로 처리.






14-11 컬렉션 프레임웍과 함수형 인터페이스
- 함수형 인터페이스를 사용하는 컬렉션 프레임웍의 메서드(와일드 카드 생략)
이미지1




14-13 메서드 참조(method reference)
- 하나의 메서드만 호출하는 람다식은 '메서드 참조'로 간단히 할 수 있다.
이미지1
특정 객체 인스턴스메서드 참조는 거의 사용 안함

- static메서드 참조
이미지2



14-14 생성자의 메서드 참조
- 생성자와 메서드 참조
- 배열과 메서드 참조
코드3






14-15 스트림(Stream)
- 다양한 데이터 소스(컬렉션, 배열)를 표준화된 방법으로 다루기 위한 것
이미지1
Stream<T> Collection.stream()

- 스트림으로 작업 하는 법
1. 스트림 만들기 -> 2. 중간 연산 -> 3. 최종 연산 -> 결과

- 스트림이 제공하는 기능
이미지2



14-16 스트림의 특징
1. 스트림은 데이터 소스로부터 데이터를 읽기만 할 뿐 변경하지 않는다.
이미지3

2. 스트림은 Iterator처럼 일회용이다.(필요하면 다시 스트림을 생성해야 함)
이미지4

3. 최종 연산 전까지 중간연산이 수행되지 않는다. - 지연된 연산
이미지5
1~45범위의 난수를 발생시켰는데 요소의 개수가 정해져있지 않음
distinct로 중복제거를 할 순 없지만 지연시켜서 나중에 처리할 수 있음


4. 스트림은 작업을 내부 반복으로 처리할 수 있다.
이미지6


5. 스트림의 작업을 병렬로 처리 - 병렬스트림
이미지7
parallel() 메서드를 호출함으로 병렬 스트림으로 전환
멀티쓰레드처럼 여러쓰레드가 처리하는 방식

6. 기본형 스트림 - IntStream, LongStream, DoubleStream 등
- 오토박싱&언박싱의 비효율이 제거됨(Stream<Integer>대신 IntStream을 사용)
- 숫자와 관련된 유용한 메서드를 Stream<T>보다 더 많이 제공




14-17 스트림 만들기 - 컬렉션
- Collection인터페이스의 stream()으로 컬렉션을 스트림으로 변환
이미지1

- 객체 배열로부터 스트림 생성하기
이미지2

- 기본형 배열로부터 스트림 생성하기
이미지3

- 난수를 요소로 갖는 스트림 생성하기
이미지4

* 지정된 범위의 난수를 요소로 갖는 스트림을 생성하는 메서드(Random클래스)
이미지5

- 특정 범위의 정수를 요소로 갖는 스트림 생성하기(IntStream, LongStream)
이미지6

- 람다식을 소스로 하는 스트림 생성하기
이미지7
iterate()는 이전 요소를 seed로 해서 다음 요소를 계산함
generate()는 seed를 사용하지 않음


14-22 스트림 만들기 - 파일과 빈 스트림
- 파일을 소스로 하는 스트림 생성하기
이미지8