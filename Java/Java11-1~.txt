11-1 컬렉션 프레임웍(collections framework)
컬렉션(collection)
- 여러 객체(데이터)를 모아 놓은 것을 의미

프레임웍(framework)
- 표준화, 정형화된 체계적인 프로그래밍 방식

컬렉션 프레임웍(collections framework)
- 컬렉션(다수의 객체)을 다루기 위한 표준화된 프로그래밍 방식
- 컬렉션을 쉽고 편리하게 다룰 수 있는 다양한 클래스를 제공
- java.util패키지에 포함. JDK1.2부터 제공(표준화)

컬렉션 클래스(collection class)
- 다수의 데이터를 저장할 수 있는 클래스 (Vector, ArrayList, HashSet)



11-2 컬렉션 프레임웍의 핵심 인터페이스
이미지1



11-3 Collection인터페이스의 메서드
이미지1


11-4 List인터페이스 - 저장순서 o , 중복 o
이미지1
이미지2
*컬렉션 인터페이스 메서드들도 포함하지만 많기 때문에 제외함


11-5 Set인터페이스 - 저장순서 x , 중복 x
* Set인터페이스의 메서드 - Collection인터페이스와 동일
이미지1
이미지2


11-6 Map인터페이스 - 저장순서x , 중복(키x, 값o)
이미지1
이미지2


11-7 ArrayList
- ArrayList는 기존의 Vector를 개선한 것으로 구현원리와 기능적으로 동일
ArrayList와 달리 Vector는 자체적으로 동기화처리가 되어 있다.
- List인터페이스를 구현하므로, 저장순서가 유지되고 중복을 허용한다.
- 데이터의 저장공간으로 배열을 사용한다.(배열기반)


11-8 ArrayList의 메서드
이미지1 생성자
이미지2


11-10 ArrayList에 저장된 객체의 삭제과정
이미지1
이미지2
이미지3
모두 삭제하려면 마지막 객체부터 삭제하는게 좋음

11-11 Java API 소스보기
이미지1
이클립스에서 보기
ArrayList 우클릭
이미지1


11-12 LinkedList
배열의 장단점
장점 : 배열은 구조가 간단하고 데이터를 읽는데 걸리는 시간(접근시간, access time)이 짧다
단점 1: 크기를 변경할 수 없다.
- 크기를 변경해야 하는 경우 새로운 배열을 생성 후 데이터를 복사해야함.
- 크기 변경을 피하기 위해 충분히 큰 배열을 생성하면, 메모리가 낭비됨.
단점 2: 비순차적인 데이터의 추가, 삭제에 시간이 많이 걸린다.
- 데이터를 추가하거나 삭제하기 위해, 다른 데이터를 옮겨야 함.
- 그러나 순차적인 데이터 추가(끝에 추가)와 삭제(끝부터 삭제)는 빠르다.


LinkedList - 배열의 단점을 보완
- 배열과 달리 LinkedList는 불연속적으로 존재하는 데이터를 연결(link)
이미지1

이미지2
이중 연결 리스트는 참조변수를 하나 더 둠

11-14 ArrayList와 LinkedList의 비교
이미지1
1. 순차적으로 데이터를 추가/삭제 - ArrayList가 빠름
2. 비순차적으로 데이터를 추가/삭제 - LinkedList가 빠름
3. 접근시간(access time) - ArrayList가 빠름

인덱스가 n인 데이터의 주소 = 배열의 주소 + n * 데이터 타입의 크기
이미지2


11-15 스택과 큐
이미지1
배열은 스택으로, 링크드리스트는 큐로 구현하는 것이 적합함.

스택의 메서드
이미지2

큐의 메서드
이미지3


11-18 인터페이스를 구현한 클래스 찾기
1. Queue를 직접구현
2. Queue를 구현한 클래스를 사용


11-19 스택과 큐의 활용
이미지1


11-22 Iterator, ListIterator, Enumeration
- 컬렉션에 저장된 데이터를 접근하는데 사용되는 인터페이스
- Enumeration은 Iterator의 구버전
- ListIterator는 Iterator의 접근성을 향상시킨 것 (단방향 -> 양방향)
이미지1
- 컬렉션(List, Set, Map)에 저장된 요소들을 읽어오는 방법을 표준화한 것
확인하고 읽어오는게 핵심

이미지2


Iterator
- 컬렉션(List, Set, Map)에 저장된 요소들을 읽어오는 방법을 표준화한 것


11-24 Map과 iterator
- Map 에는 iterator()가 없다.
- keySet(), entrySet(), values()를 호출해야 함.
이미지1



11-25 Arrays - 배열을 다루기 편리한 메서드(static) 제공
이미지1
이미지2
이미지3
setAll은 람다식을 이용해서 채움
이미지4
binarySearch()를 사용하려면 정렬을 하고 사용해야함.

이미지5
이미지6
이미지7































